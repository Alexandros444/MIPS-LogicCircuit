: func_Init
    li $1 0
    li $2 0
    li $3 0
    li $4 0
    li $5 0
    li $6 0
    li $7 0
    li $8 0
    li $9 0
    li $10 0
    li $11 0
    li $12 0
    li $13 0
    li $14 0
    li $15 0
    li $16 0
    li $17 0
    li $18 0
    li $19 0
    li $20 0
    li $21 0
    li $22 0
    li $23 0
    li $24 0
    li $25 0
    li $26 0
    li $27 0
    li $28 0
    ladr $29 sp
    li $30 0
    li $31 0
    j func_main
    nop
: CONSTS
    const s0 0
    const s1 0
    const s2 0
    const s3 0
    const s4 0
    const s5 0
    const s6 0
    const s7 0
    const s8 0
    const s9 0
    const s10 0
    const s11 0
    const s12 0
    const s13 0
    const s14 0
    const s15 0
    const s16 0
    const s17 0
    const s18 0
    const s19 0
    const s20 0
    const s21 0
    const s22 0
    const s23 0
    const s24 0
    const s25 0
    const s26 0
    const s27 0
    const s28 0
    const s29 0
    const s30 0
    const s31 0
: func_main   
    # print func_animation
    jal func_animation
    nop

    j eof
    nop

: func_draw_compare
    li $16 32
    li $17 0
    li $18 0
    li $19 0
    li $2 0
    : drawLoop
        normale func
        mv $4 $17
        li $5 5
        mv $6 $18
        jal func_drawXY
        nop
        mv $18 $2
        faste func
        mv $4 $17
        li $5 6
        mv $6 $19
        jal func_fast_drawXY
        nop
        mv $19 $2
        
        # inc und branch
        inc $17
        beq $16 $17 drawLoop_end
        nop
        j drawLoop
        nop
    : drawLoop_end
    jr $31
    nop
: func_drawXY         # Arguemnte $4-X/$5-Y/$6-add
    # X berechnen
    li $8 1
    : shift
        beq $4 $0 shift_end
        nop
        addi $4 $4 -1
        add  $8 $8 $8
        j shift
        nop
    : shift_end
    or $8 $8 $6
    # X in $8
    dwr $8 $5
    # X als rückgabewert in $2
    mv $2 $8
    jr $31
    nop
: func_fast_drawXY    # Arguemnte $4-X/$5-Y/$6-add
    j const_end
    nop
    const p0 1
    const p1 2
    const p2 4
    const p3 8
    const p4 16
    const p5 32
    const p6 64
    const p7 128
    const p8 256
    const p9 512
    const p10 1024
    const p11 2048
    const p12 4096
    const p13 8192
    const p14 16384
    const p15 32768
    const p16 65536
    const p17 131072
    const p18 262144
    const p19 524288
    const p20 1048576
    const p21 2097152
    const p22 4194304
    const p23 8388608
    const p24 16777216
    const p25 33554432
    const p26 67108864
    const p27 134217728   
    const p28 268435456
    const p29 536870912
    const p30 1073741824
    const p31 2147483648
    : const_end
    # lade in $8 den richtigen wert, mit $4 als select "offset"
    lw $8 $4 p0
    or $8 $8 $6
        # X in $8
    dwr $8 $5
    # X als rückgabewert in $2
    mv $2 $8
    jr $31
    nop
: func_animation
    j func_animation_const_end
    nop
    const f0 65536
    const f1 229376
    const f2 163840
    const f3 442368
    const f4 278528
    const f5 532480
    : func_animation_const_end

    lw $8 $0 f0
    sw $8 $0 s0
    lw $8 $0 f1
    sw $8 $0 s1
    lw $8 $0 f2
    sw $8 $0 s2
    lw $8 $0 f3
    sw $8 $0 s3
    lw $8 $0 f4
    sw $8 $0 s4
    lw $8 $0 f5
    sw $8 $0 s5

    sw $31 $29 0
    inc $29
    jal func_print_Screen
    nop
    dec $29
    lw $31 $29 0
    jr $31
    nop 
: func_print_Screen
    li $8 0
    li $9 31
    : print_loop
        lw $10 $8 s0
        dwr $10 $8
        inc $8
        beq $8 $9 print_loop_end
        nop
        j print_loop
        nop
    : print_loop_end
    jr $31
    nop
: eof   
    j eof
    nop
: sp # Stack Pointer 29 points here